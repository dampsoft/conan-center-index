From 4cc5402099b8d04f82544f24435a4b9a07b784a4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim=20Friedrich=20Br=C3=BCggemann?=
 <tim.brueggemann@dampsoft.de>
Date: Wed, 2 Apr 2025 15:06:37 +0200
Subject: [PATCH] Fixup-build-on-MacOS-15.4-with-lower-deployment target

---
 meson.build                |  9 +++++++--
 src/include/pg_config.h.in |  7 ++++---
 src/port/snprintf.c        | 23 +++++++++--------------
 3 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/meson.build b/meson.build
index df3f1a6a414..561d5607980 100644
--- a/meson.build
+++ b/meson.build
@@ -2467,7 +2467,9 @@ decl_checks = [
 # checking for library symbols wouldn't handle deployment target
 # restrictions on macOS
 macos_min_version_option = get_option('macos_min_version')
-if macos_min_version_option != '' and macos_min_version_option.split('.')[0].to_int() <= 10
+macos_min_version_option_major = macos_min_version_option.split('.')[0].to_int()
+macos_min_version_option_minor = macos_min_version_option.split('.')[1].to_int()
+if macos_min_version_option != '' and macos_min_version_option_major <= 10
   decl_checks += [
     ['preadv', 'false'],
     ['pwritev', 'false'],
@@ -2479,6 +2481,10 @@ else
   ]
 endif
 
+if macos_min_version_option != '' and macos_min_version_option_major < 15 or (macos_min_version_option_major == 15 and macos_min_version_option_minor < 4)
+  decl_checks += [['strchrnul', 'false']]
+endif
+
 # Check presence of some optional LLVM functions.
 if llvm.found()
   decl_checks += [
@@ -2737,7 +2743,6 @@ func_checks = [
   ['shm_unlink', {'dependencies': [rt_dep], 'define': false}],
   ['shmget', {'dependencies': [cygipc_dep], 'define': false}],
   ['socket', {'dependencies': [socket_dep], 'define': false}],
-  ['strchrnul'],
   ['strerror_r', {'dependencies': [thread_dep]}],
   ['strlcat'],
   ['strlcpy'],
diff --git a/src/include/pg_config.h.in b/src/include/pg_config.h.in
index 2397d90b465..0ee4a63eaa6 100644
--- a/src/include/pg_config.h.in
+++ b/src/include/pg_config.h.in
@@ -115,6 +115,10 @@
    don't. */
 #undef HAVE_DECL_PWRITEV
 
+/* Define to 1 if you have the declaration of `strchrnul', and to 0 if you
+   don't. */
+#undef HAVE_DECL_STRCHRNUL
+
 /* Define to 1 if you have the declaration of `strlcat', and to 0 if you
    don't. */
 #undef HAVE_DECL_STRLCAT
@@ -393,9 +397,6 @@
 /* Define to 1 if you have the <stdlib.h> header file. */
 #undef HAVE_STDLIB_H
 
-/* Define to 1 if you have the `strchrnul' function. */
-#undef HAVE_STRCHRNUL
-
 /* Define to 1 if you have the `strerror_r' function. */
 #undef HAVE_STRERROR_R
 
diff --git a/src/port/snprintf.c b/src/port/snprintf.c
index 884f0262dd1..cf38da3e937 100644
--- a/src/port/snprintf.c
+++ b/src/port/snprintf.c
@@ -343,8 +343,15 @@ static void trailing_pad(int padlen, PrintfTarget *target);
  *
  * Note: glibc declares this as returning "char *", but that would require
  * casting away const internally, so we don't follow that detail.
+ *
+ * Note: macOS has this too as of Sequoia 15.4, but it's hidden behind
+ * a deployment-target check that causes compile errors if the deployment
+ * target isn't high enough.  To work around that, use a macro to redefine
+ * what "strchrnul" means.
  */
-#ifndef HAVE_STRCHRNUL
+#if !HAVE_DECL_STRCHRNUL
+
+#define strchrnul pg_strchrnul
 
 static inline const char *
 strchrnul(const char *s, int c)
@@ -354,19 +361,7 @@ strchrnul(const char *s, int c)
 	return s;
 }
 
-#else
-
-/*
- * glibc's <string.h> declares strchrnul only if _GNU_SOURCE is defined.
- * While we typically use that on glibc platforms, configure will set
- * HAVE_STRCHRNUL whether it's used or not.  Fill in the missing declaration
- * so that this file will compile cleanly with or without _GNU_SOURCE.
- */
-#ifndef _GNU_SOURCE
-extern char *strchrnul(const char *s, int c);
-#endif
-
-#endif							/* HAVE_STRCHRNUL */
+#endif							/* !HAVE_DECL_STRCHRNUL */
 
 
 /*
-- 
2.49.0

